@page "/reservations"
@using EventManagement.Components.Pages.Reservation.DialogComponents
@using EventManagement.Services.EventService
@using EventManagement.Services.ReservationService
@using EventManagement.Services.UserService
@using EventManagement.Shared.DataTransferObject

@inject IDialogService dialogsService
@inject IReservationService reservationServices
@inject IUserService userServices
@inject IEventService eventServices

@if (isLoadingType)
{
    <MudProgressCircular Color="Color.Primary" Style="height:100px; width:100px; position:fixed; top:40%; left:50%;" Indeterminate="true" />
}
else
{
    <div class="d-flex justify-end flex-grow-1 gap-4 mb-2 mt-4">
        <MudBreadcrumbs Items="BreadcrumbItems">
            <ItemTemplate Context="item">
                <MudLink Href="@item.Href">@item.Text.ToUpper()</MudLink>
            </ItemTemplate>
        </MudBreadcrumbs>

        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="()=>OpenDialog()" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto">Add Reservation</MudButton>
    </div>

    <MudTable Items="reservations" T="ReservationDto">
        <HeaderContent>
            <MudTh>Event Name</MudTh>
            <MudTh>User Name</MudTh>
            <MudTh>ReservationDate</MudTh>
            <MudTh>Number Of Seats</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@GetEventNameById(context.EventId)</MudTd>
            <MudTd>@GetUserNameById(context.UserId)</MudTd>
            <MudTd>@context.ReservationDate</MudTd>
            <MudTd>@context.NumberOfSeats</MudTd>
            <MudTh>
                <MudButton Variant="Variant.Outlined" OnClick="()=>OpenDialog(context.Id)" Class="mr-2" Color="Color.Success">Edit</MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="()=>Delete(context.Id)" Color="Color.Error">Delete</MudButton>
            </MudTh>
        </RowTemplate>
    </MudTable>
}

@code {
    public bool isLoadingType = true;

    private List<ReservationDto> reservations = new List<ReservationDto>();
    private List<UserDto> users = new List<UserDto>();
    private List<EventDto> events = new List<EventDto>();

    private List<BreadcrumbItem> BreadcrumbItems = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Reservations", href: "reservations", disabled: true),
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoadingType = false;
        StateHasChanged();
    }

    private async Task LoadData(/*ToolCategory? category = null*/)
    {
        reservations.Clear();
        users.Clear();
        events.Clear();

        var result = await reservationServices.GetReservationList();
        var result2 = await eventServices.GetEventList();
        var result3 = await userServices.GetUserList();
        if (result == null || result2 == null || result3 == null)
        {
            reservations = new List<ReservationDto>();
            events = new List<EventDto>();
            users = new List<UserDto>();
        }
        else
        {
            reservations = result.ToList();
            events = result2.ToList();
            users = result3.ToList();
            StateHasChanged();
        }
    }

    private void OpenDialog(Guid? content = null)
    {
        var parameters = new DialogParameters();
        var callback = async () => { await OnInitializedAsync(); };

        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MudBlazor.MaxWidth.Large
            };

        parameters.Add("Id", content);
        parameters.Add("callback", callback);

        var dialog = dialogsService.Show<AddEditReservationDialog>("Reservation details", parameters, options);
    }

    private async Task Delete(Guid reservationId)
    {
        var result = await reservationServices.DeleteReservation(reservationId);
        await OnInitializedAsync();
    }

    private string GetUserNameById(Guid userId)
    {
        return users.Find(x => x.Id == userId).FullName;
    }

    private string GetEventNameById(Guid eventId)
    {
        return events.Find(x => x.Id == eventId).Name;
    }
}
